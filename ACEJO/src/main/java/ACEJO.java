/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author WS
 */
public class ACEJO extends javax.swing.JFrame {

    /**
     * Creates new form ACEJO
     */
    public ACEJO() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        output = new javax.swing.JLabel();
        ClearEntry = new javax.swing.JButton();
        PositiveNegative = new javax.swing.JButton();
        Modulo = new javax.swing.JButton();
        Divide = new javax.swing.JButton();
        Eight = new javax.swing.JButton();
        Seven = new javax.swing.JButton();
        Nine = new javax.swing.JButton();
        Multiply = new javax.swing.JButton();
        Four = new javax.swing.JButton();
        Subtract = new javax.swing.JButton();
        Six = new javax.swing.JButton();
        Five = new javax.swing.JButton();
        Three = new javax.swing.JButton();
        Two = new javax.swing.JButton();
        One = new javax.swing.JButton();
        Addition = new javax.swing.JButton();
        Zero = new javax.swing.JButton();
        DecimalPoint = new javax.swing.JButton();
        Equals = new javax.swing.JButton();
        ClearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        output.setBackground(new java.awt.Color(102, 102, 102));
        output.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        output.setForeground(new java.awt.Color(255, 255, 255));
        output.setOpaque(true);

        ClearEntry.setBackground(new java.awt.Color(204, 204, 204));
        ClearEntry.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        ClearEntry.setText("CE");
        ClearEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearEntryActionPerformed(evt);
            }
        });

        PositiveNegative.setBackground(new java.awt.Color(204, 204, 204));
        PositiveNegative.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        PositiveNegative.setText("+/-");
        PositiveNegative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PositiveNegativeActionPerformed(evt);
            }
        });

        Modulo.setBackground(new java.awt.Color(204, 204, 204));
        Modulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Modulo.setText("%");
        Modulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModuloActionPerformed(evt);
            }
        });

        Divide.setBackground(new java.awt.Color(255, 153, 0));
        Divide.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Divide.setText("/");
        Divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DivideActionPerformed(evt);
            }
        });

        Eight.setBackground(new java.awt.Color(204, 204, 204));
        Eight.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Eight.setText("8");
        Eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EightActionPerformed(evt);
            }
        });

        Seven.setBackground(new java.awt.Color(204, 204, 204));
        Seven.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Seven.setText("7");
        Seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SevenActionPerformed(evt);
            }
        });

        Nine.setBackground(new java.awt.Color(204, 204, 204));
        Nine.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Nine.setText("9");
        Nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NineActionPerformed(evt);
            }
        });

        Multiply.setBackground(new java.awt.Color(255, 153, 0));
        Multiply.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Multiply.setText("X");
        Multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiplyActionPerformed(evt);
            }
        });

        Four.setBackground(new java.awt.Color(204, 204, 204));
        Four.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Four.setText("4");
        Four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FourActionPerformed(evt);
            }
        });

        Subtract.setBackground(new java.awt.Color(255, 153, 0));
        Subtract.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Subtract.setText("-");
        Subtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubtractActionPerformed(evt);
            }
        });

        Six.setBackground(new java.awt.Color(204, 204, 204));
        Six.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Six.setText("6");
        Six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SixActionPerformed(evt);
            }
        });

        Five.setBackground(new java.awt.Color(204, 204, 204));
        Five.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Five.setText("5");
        Five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiveActionPerformed(evt);
            }
        });

        Three.setBackground(new java.awt.Color(204, 204, 204));
        Three.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Three.setText("3");
        Three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThreeActionPerformed(evt);
            }
        });

        Two.setBackground(new java.awt.Color(204, 204, 204));
        Two.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Two.setText("2");
        Two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TwoActionPerformed(evt);
            }
        });

        One.setBackground(new java.awt.Color(204, 204, 204));
        One.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        One.setText("1");
        One.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OneActionPerformed(evt);
            }
        });

        Addition.setBackground(new java.awt.Color(255, 153, 0));
        Addition.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Addition.setText("+");
        Addition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdditionActionPerformed(evt);
            }
        });

        Zero.setBackground(new java.awt.Color(204, 204, 204));
        Zero.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Zero.setText("0");
        Zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZeroActionPerformed(evt);
            }
        });

        DecimalPoint.setBackground(new java.awt.Color(204, 204, 204));
        DecimalPoint.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        DecimalPoint.setText(".");
        DecimalPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecimalPointActionPerformed(evt);
            }
        });

        Equals.setBackground(new java.awt.Color(204, 204, 204));
        Equals.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Equals.setText("=");
        Equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EqualsActionPerformed(evt);
            }
        });

        ClearAll.setBackground(new java.awt.Color(204, 204, 204));
        ClearAll.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        ClearAll.setText("C");
        ClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ClearEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ClearAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Seven, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Eight, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Four, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(One, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PositiveNegative, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Five, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Two, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Zero, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Modulo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Nine, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Six, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Three, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DecimalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Divide, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Addition, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Equals, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClearEntry)
                    .addComponent(Modulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClearAll)
                    .addComponent(Multiply))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Seven)
                            .addComponent(Nine)
                            .addComponent(Divide)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Eight)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Five, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Four))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(One)
                            .addComponent(Two)
                            .addComponent(Three))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PositiveNegative)
                            .addComponent(Zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DecimalPoint))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Six)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Subtract)
                        .addGap(18, 18, 18)
                        .addComponent(Addition)
                        .addGap(18, 18, 18)
                        .addComponent(Equals, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(46, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(282, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SevenActionPerformed
        output.setText(output.getText() + "7");
    }//GEN-LAST:event_SevenActionPerformed

    private void EqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EqualsActionPerformed
       String expression = output.getText();

    if (!expression.isEmpty()) {
        // Replace 'x' with '*' for multiplication
        expression = expression.replaceAll("x", "*");

        // Split the expression into operands and operator
        String[] parts = expression.split("[+\\-*/%]");

        if (parts.length >= 2) {
            double result = 0;
            String operator = "";

            for (int i = 0; i < parts.length; i++) {
                // Skip empty strings in the parts array
                if (parts[i].isEmpty()) {
                    continue;
                }

                // The first element is the result if i is 0
                if (i == 0) {
                    try {
                        result = Double.parseDouble(parts[i]);
                    } catch (NumberFormatException e) {
                        output.setText("Error: Invalid operand");
                        return;
                    }
                } else {
                    operator = expression.substring(result == 0 ? 0 : parts[i - 1].length(), parts[i - 1].length() + 1);

                    // Check if the nextOperand is not an empty string before parsing
                    if (!parts[i].isEmpty()) {
                        try {
                            double nextOperand = Double.parseDouble(parts[i]);

                            switch (operator) {
                                case "+":
                                    result += nextOperand;
                                    break;
                                case "-":
                                    result -= nextOperand;
                                    break;
                                case "*":
                                    result *= nextOperand;
                                    break;
                                case "/":
                                    if (nextOperand != 0) {
                                        result /= nextOperand;  // Division corrected here
                                    } else {
                                        output.setText("Error: Division by zero");
                                        return;
                                    }
                                    break;
                                case "%":
                                    // Convert percentage to decimal (e.g., 8% = 0.08)
                                    result %= result * (nextOperand / 100.0);
                                    break;
                                default:
                                    output.setText("Error: Invalid operator");
                                    return;
                            }
                        } catch (NumberFormatException e) {
                            output.setText("Error: Invalid operand");
                            return;
                        }
                    } else {
                        // Handle the case where nextOperand is an empty string
                        output.setText("Error: Invalid expression");
                        return;
                    }
                }
            }

            // Display the result without '.0' for whole numbers
            if (result == (int) result) {
                output.setText(Integer.toString((int) result));
            } else {
                // Display the result with decimal places for non-whole numbers
                output.setText(Double.toString(result));
            }
        } else {
            output.setText("Error: Invalid expression");
        }
    }

    }//GEN-LAST:event_EqualsActionPerformed

    private void ClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllActionPerformed
      output.setText(output.getText() + "");
    }//GEN-LAST:event_ClearAllActionPerformed

    private void TwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TwoActionPerformed
        output.setText(output.getText() + "2");
    }//GEN-LAST:event_TwoActionPerformed

    private void SubtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubtractActionPerformed
        output.setText(output.getText() + "-");
    }//GEN-LAST:event_SubtractActionPerformed

    private void ClearEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearEntryActionPerformed
        String currentText = output.getText();
    if (!currentText.isEmpty()) {
        output.setText(currentText.substring(0, currentText.length() - 1));
    }//GEN-LAST:event_ClearEntryActionPerformed

    private void ModuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModuloActionPerformed
            
    }//GEN-LAST:event_ModuloActionPerformed

    private void FourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FourActionPerformed
        output.setText(output.getText() + "4");
    }//GEN-LAST:event_FourActionPerformed

    private void OneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OneActionPerformed
        output.setText(output.getText() + "1");
    }//GEN-LAST:event_OneActionPerformed

    private void PositiveNegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PositiveNegativeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PositiveNegativeActionPerformed

    private void EightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EightActionPerformed
        output.setText(output.getText() + "8");
    }//GEN-LAST:event_EightActionPerformed

    private void FiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiveActionPerformed
        output.setText(output.getText() + "5");
    }//GEN-LAST:event_FiveActionPerformed

    private void ZeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZeroActionPerformed
        output.setText(output.getText() + "0");
    }//GEN-LAST:event_ZeroActionPerformed

    private void NineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NineActionPerformed
         output.setText(output.getText() + "9");
    }//GEN-LAST:event_NineActionPerformed

    private void SixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SixActionPerformed
         output.setText(output.getText() + "6");
    }//GEN-LAST:event_SixActionPerformed

    private void ThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThreeActionPerformed
         output.setText(output.getText() + "3");
    }//GEN-LAST:event_ThreeActionPerformed

    private void DecimalPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecimalPointActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DecimalPointActionPerformed

    private void MultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiplyActionPerformed
        String currentText = output.getText();
    if (!currentText.isEmpty()) {
        output.setText(currentText + "x");
    }            // TODO add your handling
    }//GEN-LAST:event_MultiplyActionPerformed

    private void DivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DivideActionPerformed
        String currentText = output.getText();
    if (!currentText.isEmpty()) {
        output.setText(currentText + "/");
    }            // TODO add your handling
    }//GEN-LAST:event_DivideActionPerformed

    private void AdditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdditionActionPerformed
        String currentText = output.getText();
    if (!currentText.isEmpty()) {
        output.setText(currentText + "+");
    }            // TODO add your handling
    }//GEN-LAST:event_AdditionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ACEJO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ACEJO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ACEJO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ACEJO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ACEJO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addition;
    private javax.swing.JButton ClearAll;
    private javax.swing.JButton ClearEntry;
    private javax.swing.JButton DecimalPoint;
    private javax.swing.JButton Divide;
    private javax.swing.JButton Eight;
    private javax.swing.JButton Equals;
    private javax.swing.JButton Five;
    private javax.swing.JButton Four;
    private javax.swing.JButton Modulo;
    private javax.swing.JButton Multiply;
    private javax.swing.JButton Nine;
    private javax.swing.JButton One;
    private javax.swing.JButton PositiveNegative;
    private javax.swing.JButton Seven;
    private javax.swing.JButton Six;
    private javax.swing.JButton Subtract;
    private javax.swing.JButton Three;
    private javax.swing.JButton Two;
    private javax.swing.JButton Zero;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel output;
    // End of variables declaration//GEN-END:variables
}
